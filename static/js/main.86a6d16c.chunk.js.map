{"version":3,"sources":["lib/moneyFormatter.js","services/api.js","pages/Home/styles.js","pages/Home/index.js","pages/Cart/styles.js","pages/Cart/index.js","routes.js","styles/global.js","components/Header/styles.js","components/Header/index.js","App.js","serviceWorker.js","store/modules/cart/reducer.js","store/modules/rootReducer.js","store/index.js","index.js","assets/images/bg.svg","assets/images/logo.svg"],"names":["moneyFormatter","Intl","NumberFormat","style","currency","api","axios","create","baseURL","ProductList","styled","ul","darken","memo","dispatch","useDispatch","useState","products","setProducts","loadDataFromAPI","useCallback","a","get","productsFromAPI","data","map","product","price","format","useEffect","renderProductItem","id","title","image","key","toString","src","alt","type","onClick","handleAddProduct","size","color","Container","div","ProductTable","table","Total","cart","useSelector","state","amout","readOnly","value","renderProductRow","path","exact","component","Home","Cart","createGlobalStyle","bg","header","Link","cartSize","length","to","logo","toast","configure","App","basename","process","Boolean","window","location","hostname","match","action","amount","combineReducers","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.86a6d16c.chunk.js","sourcesContent":["const moneyFormatter = new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL',\n});\n\nexport default moneyFormatter;\n","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL:\n        'https://my-json-server.typicode.com/mcodex/rocketseat-rocketshoes/',\n});\n\nexport default api;\n","import styled from 'styled-components';\nimport { darken } from 'polished';\n\nexport const ProductList = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 20px;\n    list-style: none;\n\n    li {\n        display: flex;\n        flex-direction: column;\n        background: #fff;\n        border-radius: 4px;\n        padding: 20px;\n\n        img {\n            align-self: center;\n            max-width: 250px;\n        }\n\n        > strong {\n            font-size: 16px;\n            line-height: 20px;\n            color: #333;\n            margin-top: 5px;\n        }\n\n        > span {\n            font-size: 21px;\n            font-weight: bold;\n            margin: 5px 0 20px;\n        }\n\n        button {\n            background: #7159c1;\n            color: #fff;\n            border: 0;\n            border-radius: 4px;\n            overflow: hidden;\n            margin-top: auto;\n\n            display: flex;\n            align-items: center;\n\n            transition: background 0.2s;\n\n            &:hover {\n                background: ${darken(0.03, '#7159c1')};\n            }\n\n            div {\n                display: flex;\n                align-items: center;\n                padding: 12px;\n                background: rgba(0, 0, 0, 0.1);\n\n                svg {\n                    margin-right: 5px;\n                }\n            }\n\n            span {\n                flex: 1;\n                text-align: center;\n                font-weight: bold;\n            }\n        }\n    }\n`;\n","import React, { memo, useState, useEffect, useCallback } from 'react';\nimport { MdAddShoppingCart } from 'react-icons/md';\nimport { useDispatch } from 'react-redux';\n\nimport moneyFormatter from '~/lib/moneyFormatter';\n\nimport api from '~/services/api';\n\nimport { ProductList } from './styles';\n\ntype Product = {\n    id: Number,\n    title: String,\n    price: Number,\n    image: String,\n};\n\nconst Home = () => {\n    const dispatch = useDispatch();\n\n    const [products, setProducts] = useState([]);\n\n    const loadDataFromAPI = useCallback(async () => {\n        const productsFromAPI = await api.get('products');\n\n        const data = productsFromAPI.data.map(product => ({\n            ...product,\n            price: moneyFormatter.format(product.price),\n        }));\n\n        setProducts(data);\n    }, []);\n\n    useEffect(() => {\n        loadDataFromAPI();\n    }, [loadDataFromAPI]);\n\n    const handleAddProduct = product =>\n        dispatch({ type: 'ADD_TO_CART', product });\n\n    const renderProductItem = (product: Product) => {\n        const { id, title, price, image } = product;\n        return (\n            <li key={id.toString()}>\n                <img src={image} alt={title} />\n\n                <strong>{title}</strong>\n                <span>{price}</span>\n                <button type=\"submit\" onClick={() => handleAddProduct(product)}>\n                    <div>\n                        <MdAddShoppingCart size={16} color=\"#fff\" />\n                    </div>\n                    <span>ADICIONAR AO CARRINHO</span>\n                </button>\n            </li>\n        );\n    };\n\n    return (\n        <ProductList>\n            {products.map(product => renderProductItem(product))}\n        </ProductList>\n    );\n};\n\nexport default memo(Home);\n","import styled from 'styled-components';\nimport { darken } from 'polished';\n\nexport const Container = styled.div`\n    padding: 30px;\n    background: #fff;\n    border-radius: 4px;\n\n    footer {\n        margin-top: 30px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n\n        button {\n            background: #7159c1;\n            color: #fff;\n            border: 0;\n            border-radius: 4px;\n            padding: 12px 20px;\n            font-weight: bold;\n            text-transform: uppercase;\n            transition: background 0.2s;\n\n            &:hover {\n                background: ${darken(0.03, '#7159c1')};\n            }\n        }\n    }\n`;\n\nexport const ProductTable = styled.table`\n    width: 100%;\n    thead th {\n        color: #999;\n        text-align: left;\n        padding: 12px;\n    }\n\n    tbody td {\n        padding: 12px;\n        border-bottom: 1px solid #eee;\n    }\n\n    img {\n        height: 100px;\n    }\n\n    strong {\n        color: #333;\n        display: block;\n    }\n\n    span {\n        display: block;\n        margin-top: 5px;\n        font-size: 18px;\n        font-weight: bold;\n    }\n\n    div {\n        display: flex;\n        align-items: center;\n\n        input {\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            color: #666;\n            padding: 6px;\n            width: 50px;\n        }\n    }\n\n    button {\n        background: none;\n        border: 0;\n        padding: 6px;\n    }\n`;\n\nexport const Total = styled.div`\n    display: flex;\n    align-items: baseline;\n\n    span {\n        color: #999;\n        font-weight: bold;\n    }\n\n    strong {\n        font-size: 28px;\n        margin-left: 5px;\n    }\n`;\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {\n    MdRemoveCircleOutline,\n    MdAddCircleOutline,\n    MdDelete,\n} from 'react-icons/md';\n\nimport { Container, Total, ProductTable } from './styles';\n\nconst Cart = () => {\n    const cart = useSelector(state => state.cart);\n\n    const renderProductRow = product => {\n        const { id, title, price, image, amout } = product;\n\n        return (\n            <tr key={id.toString()}>\n                <td>\n                    <img src={image} alt={title} />\n                </td>\n                <td>\n                    <strong>{title}</strong>\n                    <span>{price}</span>\n                </td>\n                <td>\n                    <div>\n                        <button type=\"button\">\n                            <MdRemoveCircleOutline size={20} color=\"#7151c9\" />\n                        </button>\n                        <input type=\"number\" readOnly value={amout} />\n                        <button type=\"button\">\n                            <MdAddCircleOutline size={20} color=\"#7151c9\" />\n                        </button>\n                    </div>\n                </td>\n                <td>\n                    <strong>{price}</strong>\n                </td>\n                <td>\n                    <MdDelete size={20} color=\"#7151c9\" />\n                </td>\n            </tr>\n        );\n    };\n\n    return (\n        <Container>\n            <ProductTable>\n                <thead>\n                    <tr>\n                        <th />\n                        <th>PRODUTO</th>\n                        <th>QTD</th>\n                        <th>SUBTOTAL</th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody>{cart.map(product => renderProductRow(product))}</tbody>\n            </ProductTable>\n\n            <footer>\n                <button type=\"submit\">Finalizar Pedido</button>\n                <Total>\n                    <span>TOTAL</span>\n                    <strong>R$</strong>\n                </Total>\n            </footer>\n        </Container>\n    );\n};\n\nexport default memo(Cart);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Cart from './pages/Cart';\n\nexport default function() {\n    return (\n        <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/cart\" component={Cart} />\n        </Switch>\n    );\n}\n","import { createGlobalStyle } from 'styled-components';\n\nimport bg from '~/assets/images/bg.svg';\n\nexport default createGlobalStyle`\n\n@import url('https://fonts.googleapis.com/css?family=Lato&display=swap');\n\n * {\n     margin: 0;\n     padding: 0;\n        outline: 0;\n        box-sizing: border-box;\n }\n\n body {\n     background: #191920 url(${bg}) no-repeat center top;\n     -webkit-font-smoothing: antialiased;\n }\n\n body, input , button {\n     font: 14px Lato, sans-serif;\n }\n\n #root {\n     max-width: 1020px;\n     margin: 0 auto;\n     padding: 0 20px 50px;\n }\n\n button {\n     cursor: pointer;\n }\n\n\n`;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.header`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 50px 0;\n`;\n\nexport const Cart = styled(Link)`\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    transition: opacity 0.2s;\n\n    &:hover {\n        opacity: 0.7;\n    }\n\n    div {\n        text-align: right;\n        margin-right: 10px;\n\n        strong {\n            display: block;\n            color: #fff;\n        }\n\n        span {\n            font-size: 12px;\n            color: #999;\n        }\n    }\n`;\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { MdShoppingBasket } from 'react-icons/md';\nimport { Container, Cart } from './styles';\n\nimport logo from '~/assets/images/logo.svg';\n\nconst Header = () => {\n    const cartSize = useSelector(state => state.cart.length);\n\n    return (\n        <Container>\n            <Link to=\"/\">\n                <img src={logo} alt=\"Rocketshoes\" />\n            </Link>\n            <Cart to=\"/cart\">\n                <div>\n                    <strong>Meu Carrinho</strong>\n                    <span>{`${cartSize} ${\n                        cartSize > 1 ? 'itens' : 'item'\n                    }`}</span>\n                </div>\n                <MdShoppingBasket size={36} color=\"#fff\" />\n            </Cart>\n        </Container>\n    );\n};\n\nexport default memo(Header);\n","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './config/ReactotronConfig';\n\nimport Routes from './routes';\n\nimport GlobalStyle from './styles/global';\n\nimport Header from './components/Header';\nimport 'react-toastify/dist/ReactToastify.css';\n\ntoast.configure();\n\nconst App = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Header />\n        <Routes />\n        <GlobalStyle />\n    </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const cart = (state = [], action) => {\n    switch (action.type) {\n        case 'ADD_TO_CART':\n            return [\n                ...state,\n                {\n                    ...action.product,\n                    amount: 1,\n                },\n            ];\n        default:\n            return state;\n    }\n};\n\nexport default cart;\n","import { combineReducers } from 'redux';\n\nimport cart from './cart/reducer';\n\nexport default combineReducers({\n    cart,\n});\n","import { createStore } from 'redux';\n\nimport rootReducer from './modules/rootReducer';\n\nconst enhancer =\n    process.env.NODE_ENV === 'development'\n        ? console.tron.createEnhancer()\n        : null;\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.3c9a1ce5.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.879557c5.svg\";"],"sourceRoot":""}